#*******************************************************************************
# -*- coding: cp1251 -*-
#
#     SCons main construct file
#
#     Processor: Blackfin (Analog Devices)
#
#     Toolkit:   VisualDSP++
#
#     Copyright (c) 2006, Harry E. Zhurov
#
#
#     $Date$
#     $Rev$
#
#-------------------------------------------------------------------------------
import os
import sys
import glob
import subprocess
import re

sys.path.append(os.getcwd() + '\\Config')

import utils
import get_info
import vdsp_lst

#===============================================================================
#
#     User definable area
#
#-------------------------------------------------------------------------------
#
#     Project settings
#
ProjectName  = 'slon'

SourceDirs   = ['Src', 
                '../scmRTOS/Common', 
                '../scmRTOS/BF533']

#--------------------------------------
#
#     Options
#
Processor    = 'BF533'
DeviceRev    = '0.3'

Optimization = ' -Ov 80 '

ExtraAFlags  = ''
ExtraCFlags  = ''
ExtraLFlags  = ''





#===============================================================================
#
#    !!!  Service area  !!!
#
#-------------------------------------------------------------------------------
#
#    Project structure
#
ObjDir     = 'Obj'
ListDir    = 'List'
ExeDir     = 'Exe'
ConfigDir  = 'Config'

ServiceDirs = [ ObjDir, ListDir, ExeDir, ConfigDir ]
for i in ServiceDirs:
    curdir = os.getcwd() + '\\' + i
    if not os.path.exists(curdir):
        print 'Directory ' + curdir + ' does not exists. Creating the directory...',
        os.mkdir(curdir)
        print 'done'

#-------------------------------------------------------------------------------
#
#    Platform specific stuff
#
AsmExt  = 'sbf'
CExt    = 'c'
CppExt  = 'cpp'
ObjExt  = 'doj'
LstExt  = 'xml'
DbgExt  = 'dxe'
HexExt  = 'hex'

#-------------------------------------------------------------------------------
#
#      Toolkit
#
AD = os.environ['AD']
TOOLKIT_PATH = AD + '\\VisualDSP4'

ASM      = TOOLKIT_PATH + '\\easmBLKFN.exe'
CC       = TOOLKIT_PATH + '\\ccblkfn.exe'
Linker   = TOOLKIT_PATH + '\\linker.exe'
XML2HTML = TOOLKIT_PATH + '\\xmlmap2html.exe'
ELFDUMP  = TOOLKIT_PATH + '\\elfdump.exe'
LOADER   = TOOLKIT_PATH + '\\elfloader.exe'

ToolkitIncPath = [TOOLKIT_PATH + '\\Blackfin\\include'] 

ToolkitLibPath = [TOOLKIT_PATH + '\\Blackfin\lib532_rev_' + DeviceRev]
#ToolkitLDFPath = [TOOLKIT_PATH + '\\Blackfin\ldf']

#-------------------------------------------------------------------------------
#
#      Tools options
#
#----------------------------------------------------
#
#      Include, library, config files and paths
#
IncludePath = ''.join(' -I' + i for i in SourceDirs + ToolkitIncPath)
LibraryPath = ''.join(' -L' + i for i in ToolkitLibPath)

LinkerCmdFile = ConfigDir + '\\' + Processor + 'cpp.ldf'
LinkerMapFile = ListDir   + '\\' + ProjectName + '.map'

#-------------------------------------------------------------------------------
#
#    The options
#
AFLAGS  = IncludePath 
AFLAGS += ' -g'                      #  generate debug info
AFLAGS += ' -proc ADSP-' + Processor
AFLAGS += ExtraAFlags
#-------------------------------------------------------------------------------
CFLAGS  = ' -proc ADSP-' + Processor 
CFLAGS += ' -si-revision ' + DeviceRev 
CFLAGS += ' -C'                # Retains preprocessor comments in the output file
CFLAGS += ' -c'                # Compiles and/or assembles only, but does not link
CFLAGS += ' -g'                # Generate debug information
CFLAGS += ' -Wsuppress cc1164' # Suppress warning about "void main()" 
CFLAGS += ' -path-output ' + ObjDir
CFLAGS += ' -save-temps'
CFLAGS += ' -c++ -instantlocal'
CFLAGS += IncludePath + Optimization + ExtraCFlags
#-------------------------------------------------------------------------------
LFLAGS  = ' -proc ADSP-' + Processor 
LFLAGS += ' -si-revision ' + DeviceRev 
LFLAGS += ' -L ' + ObjDir + LibraryPath
LFLAGS += ' -T ' + LinkerCmdFile
LFLAGS += ' -Map ' + LinkerCmdFile
LFLAGS += ' -save-temps -e'
LFLAGS += ExtraLFlags
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
#
#    Action functions
#
def compile_cpp(target, source, env):
    #------------------------------------------------
    #
    #   Check if the first source is compiling
    #
    if env['FIRST_ENTRY'] == False:
        env['FIRST_ENTRY'] = True
        print '*'*60

    #------------------------------------------------
    #
    #   Launch compiler
    #
    print 'Compile:  ' + str(source[0])
    cmd = env['CC'] + env['CFLAGS'] + ' ' + str(source[0])
    p = subprocess.Popen(cmd, universal_newlines = True,
                         stdin  = subprocess.PIPE,
                         stdout = subprocess.PIPE,
                         stderr = subprocess.PIPE )

    out, err = p.communicate()
    out += err

    oerr = utils.handle_err(out)
    if oerr: print oerr

    rcode = p.returncode 

    if rcode != 0:
        return rcode

    sfile_name = os.path.splitext(str(target[0]))[0] + '.s'
    vdsp_lst.create_lst(sfile_name)

#-------------------------------------------------------------------------------
def assembly_src(target, source, env):
    #------------------------------------------------
    #
    #   Check if the first source is compiling
    #
    if env['FIRST_ENTRY'] == False:
        env['FIRST_ENTRY'] = True
        print '*'*60

    #------------------------------------------------
    #
    #   Launch assembler
    #
    print 'Assembly: ' + str(source[0])
    cmd = env['ASM'] + env['AFLAGS'] + ' -o ' + str(target[0]) + ' ' + str(source[0])
    p = subprocess.Popen( cmd, 
                          stdin  = subprocess.PIPE,
                          stdout = subprocess.PIPE,
                          stderr = subprocess.PIPE)

    out, err = p.communicate()
    if out: print out
    if err: print err

    return p.returncode
#-------------------------------------------------------------------------------
def BuildTarget(target, source, env):
    if env['FIRST_ENTRY'] == False:
        print '*'*60
        print 'Sources are up to date'

    print '*'*60
    print 'Link: ' + str(target[0])

    src_list = ''
    for i in xrange(len(source)):
        src_list += ' ' + str(source[i])
        
    target_name_full  = str(target[0])
    target_name_short = os.path.split(target_name_full)[1]
    target_name       = os.path.splitext(target_name_short)[0]
    mapfile_name  = target_name + '.' + LstExt
    dumpfile_name = target_name_full + '.dmp'
    
    #-------------------------------------------------------------
    #
    #    Link executable
    #
    cmd  =  env['LINKER'] + env['LFLAGS']
    cmd += ' -Map ' + ListDir + '\\' + mapfile_name
    cmd += ' -o ' + target_name_full + src_list
          
    p = subprocess.Popen(cmd)
    rcode = p.wait()

    print '*'*60
    if rcode != 0:
        return rcode

    #-------------------------------------------------------------
    #
    #    Create map file
    #
    cmd = env['XML2HTML'] + ' ' + ListDir + '\\' + mapfile_name
    p = subprocess.Popen(cmd)
    rcode = p.wait()
    if rcode != 0:
        return

    #-------------------------------------------------------------
    #
    #    Create dump of output sections
    #
    cmd = env['ELFDUMP'] + ' ' + target_name_full
    f = open(dumpfile_name, 'w')
    p = subprocess.Popen(cmd, stdout = f)
    f.close()
    rcode = p.wait()
    if rcode != 0:
        return
        
    get_info.get_info(dumpfile_name)

    #-------------------------------------------------------------
    #
    #    Generate outbut hex
    #
    #cmd = env['LOADER'] + ' -proc ADSP-BF' + Processor + ' -si-revision ' + DeviceRev + ' -T Config\bf532_init.ldf'

#-------------------------------------------------------------------------------
#
#   Builders
#
cpp2obj = Builder(action         = compile_cpp,
                  suffix         = ObjExt,
                  src_suffix     = CppExt,
                  source_scanner = CScanner)
#-------------------------------------------------------------------------------
asm2obj = Builder(action         = assembly_src,
                  suffix         = ObjExt,
                  src_suffix     = AsmExt,
                  source_scanner = CScanner)
#-------------------------------------------------------------------------------
build_exe = Builder(action       = BuildTarget,
                    suffix       = DbgExt,
                    src_suffix   = ObjExt)

#-------------------------------------------------------------------------------
#
#    State variables
#
FirstEntry = False

#-------------------------------------------------------------------------------
#
#    Environment
#

env = Environment(TOOLS = {})

env['BUILDERS'] = { 'asmObj' : asm2obj, 'cppObj' : cpp2obj, 'Exe' : build_exe }
env['ASM'        ] = ASM
env['CC'         ] = CC
env['LINKER'     ] = Linker
env['XML2HTML'   ] = XML2HTML
env['ELFDUMP'    ] = ELFDUMP
env['LOADER'     ] = LOADER
env['AFLAGS'     ] = AFLAGS
env['CFLAGS'     ] = CFLAGS
env['LFLAGS'     ] = LFLAGS
env['CPPPATH'    ] = SourceDirs + ToolkitIncPath
env['FIRST_ENTRY'] = FirstEntry

#-------------------------------------------------------------------------------
#
#    Cpp source file list
#
cpp_files = []
for i in SourceDirs:
    cpp_files += glob.glob(i + '/*.' + CppExt)

cpp_targets = {}

for i in cpp_files:
    name_ext = os.path.split(i)[1]
    name     = os.path.splitext(name_ext)[0] + '.' + ObjExt
    cpp_targets[i] = ObjDir + '/' + name
#-------------------------------------------------------------------------------
#
#    Asm source file list
#
asm_files = []
for i in SourceDirs:
    asm_files += glob.glob(i + '/*.' + AsmExt)

asm_targets = {}

for i in asm_files:
    name_ext = os.path.split(i)[1]
    name     = os.path.splitext(name_ext)[0] + '.' + ObjExt
    asm_targets[i] = ObjDir + '/' + name
    
#-------------------------------------------------------------------------------
#
#    Objects builing
#
cpp_obj_list = []
for i in cpp_files:
    cpp_obj_list.append( env.cppObj(cpp_targets[i], i) )

asm_obj_list = []
for i in asm_files:
    asm_obj_list.append( env.asmObj(asm_targets[i], i) )

obj_list = cpp_obj_list + asm_obj_list
#env.Clean(obj_list)
#-------------------------------------------------------------------------------
#
#    Main target building
#
env.Exe(source = obj_list, target = ExeDir +'\\' + ProjectName)

#-------------------------------------------------------------------------------
#
#    Clean and Rebuid
#
def remove_files(dir_, mask):
    file_list = glob.glob(dir_ + '\\*.' + mask)
    for i in file_list:
        os.remove(i)
    
#-------------------------------------------------------------------------------
def clean(target, source, env):
    os.remove('.sconsign.dblite')
    remove_files(ObjDir,  ObjExt)
    remove_files(ExeDir,  DbgExt)
    remove_files(ListDir, 'i')
    remove_files(ListDir, 'lst')
    remove_files(ListDir, 'map')

#-------------------------------------------------------------------------------
build_main = env.Alias(ProjectName, ExeDir +'\\' + ProjectName + '.' + DbgExt)
clean_all  = env.Alias('cln', action = clean)

env.AlwaysBuild('cln')
env.Alias('rebuild', [clean_all, build_main])

#-------------------------------------------------------------------------------
#print env.Dump()
 
#-------------------------------------------------------------------------------

