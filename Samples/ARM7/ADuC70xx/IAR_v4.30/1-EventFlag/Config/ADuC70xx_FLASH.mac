//********************************************************************************
//*
//*     FULLNAME:  Single-Chip Microcontroller Real-Time Operating System
//*
//*     NICKNAME:  scmRTOS
//*
//*     PROCESSOR: ADuc70xx (Analog Devices)
//*
//*     TOOLKIT:   EWARM (IAR Systems)
//*
//*     PURPOSE:   C-Spy debugger setup macros
//*
//*     Version:   3.00-beta
//*
//*     $Revision$
//*     $Date$
//*
//*     Copyright (c) 2003-2007, Harry E. Zhurov
//*
//*     Permission is hereby granted, free of charge, to any person
//*     obtaining  a copy of this software and associated documentation
//*     files (the "Software"), to deal in the Software without restriction,
//*     including without limitation the rights to use, copy, modify, merge,
//*     publish, distribute, sublicense, and/or sell copies of the Software,
//*     and to permit persons to whom the Software is furnished to do so,
//*     subject to the following conditions:
//*
//*     The above copyright notice and this permission notice shall be included
//*     in all copies or substantial portions of the Software.
//*
//*     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//*     EXPRESS  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//*     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//*     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//*     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//*     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
//*     THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//*
//*     =================================================================
//*     See http://scmrtos.sourceforge.net for documentation, latest
//*     information, license and contact details.
//*     =================================================================
//*
//******************************************************************************
//*     ARM port by Sergey A. Borshch, Copyright (c) 2006-2007

execUserPreload()
{
    Reset();
    Remap_FLASH();

    __writeMemory32(0xD3, 0x98, "Register");                        // CPSR = SVC mode, ARM, IRQ, FIQ disabled
}

execUserReset()
{
    Reset();
    Remap_FLASH();

    __writeMemory32(0xD3, 0x98, "Register");                        // CPSR = SVC mode, ARM, IRQ, FIQ disabled
    __writeMemory32(0x00000000, 0xB4, "Register");                  // set PC to reset vector
}

Remap_FLASH()
{
    __writeMemory8(0x00, 0xFFFF0220, "Memory");
    __message " remap " ;
}


Reset()
{
    __writeMemory32(0x00000000,0xFFFF0010,"Memory");    // SWICFG: clear unmaskable ints
    __writeMemory32(0xFFFFFFFF,0xFFFF000C,"Memory");    // IRQCLR: disable all maskable IRQ
    __writeMemory32(0xFFFFFFFF,0xFFFF010C,"Memory");    // FIQCLR: disable all maskable FIQ

    __writeMemory8(0x06,0xFFFF0234,"Memory");           // RSTCLR: clear reset source bits, emulate power-on reset

    __writeMemory16(0x0088,0xFFFF0308,"Memory");        // T0CON: enable timer
    __writeMemory8(0x00,0xFFFF030C,"Memory");           // T0CLRI: clear int flag
    __writeMemory16(0x0000,0xFFFF0308,"Memory");        // T0CON: disable timer
    __writeMemory16(0x0000,0xFFFF0300,"Memory");        // T0LD: clear

    __writeMemory16(0x0088,0xFFFF0308,"Memory");        // T0CON: enable timer
    __writeMemory8(0x00,0xFFFF030C,"Memory");           // T0CLRI: clear int flag
    __writeMemory16(0x0000,0xFFFF0308,"Memory");        // T0CON: disable timer
    __writeMemory16(0x0000,0xFFFF0300,"Memory");        // T0LD: clear
}