//********************************************************************************
//*
//*     FULLNAME:  Single-Chip Microcontroller Real-Time Operating System
//*
//*     NICKNAME:  scmRTOS
//*
//*     PROCESSOR: STR71x (ST)
//*
//*     TOOLKIT:   EWARM (IAR Systems)
//*
//*     PURPOSE:   C-Spy debugger setup macros
//*
//*     Version:   3.00-beta
//*
//*     $Revision: 6 $
//*     $Date: 2006-12-21 16:29:53 +0200 (Чт, 21 дек 2006) $
//*
//*     Copyright (c) 2003-2007, Harry E. Zhurov
//*
//*     Permission is hereby granted, free of charge, to any person
//*     obtaining  a copy of this software and associated documentation
//*     files (the "Software"), to deal in the Software without restriction,
//*     including without limitation the rights to use, copy, modify, merge,
//*     publish, distribute, sublicense, and/or sell copies of the Software,
//*     and to permit persons to whom the Software is furnished to do so,
//*     subject to the following conditions:
//*
//*     The above copyright notice and this permission notice shall be included
//*     in all copies or substantial portions of the Software.
//*
//*     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//*     EXPRESS  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//*     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//*     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
//*     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//*     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
//*     THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//*
//*     =================================================================
//*     See http://scmrtos.sourceforge.net for documentation, latest
//*     information, license and contact details.
//*     =================================================================
//*
//******************************************************************************
//*     ARM port by Sergey A. Borshch, Copyright (c) 2006-2007

execUserReset()
{
    Reset();
    Remap_RAM();
}

execUserPreload()
{
    Reset();
    Remap_RAM();
}

Remap_RAM()
{
    // remap throw JTAG
    __writeMemory16(0x0012,0xA0000050,"Memory");        // PCU_BOOTCR, enable debug in low power, remap to RAM
    __message " remap done ";
}

Reset()
{

    __var Tmp;
    __writeMemory32(0x00000000,0xFFFFF820,"Memory");    // EIC_IER, disable all ints
    Tmp = __readMemory32(0xFFFFF808,"Memory");          // EIC_CPIR, get current pending int
    while (Tmp)                                         // while some int pending
    {
        Tmp = __readMemory32(0xFFFFF804,"Memory");      // EIC_CPIC, get current pending int channel
        __writeMemory32((1<<Tmp),0xFFFFF840,"Memory");  // EIC_IPR, clear pending bit

        Tmp = __readMemory32(0xFFFFF808,"Memory");      // EIC_CPIR, get current pending int
    }

    __writeMemory32(0xD3, 0x98, "Register");            // CPSR = SVC mode, ARM, IRQ, FIQ disabled
    __writeMemory32(0x00000000, 0xB4 ,"Register");      // SET PC
}
