//********************************************************************************
//*
//*     FULLNAME:  Single-Chip Microcontroller Real-Time Operating System
//*
//*     NICKNAME:  scmRTOS
//*
//*     PROCESSOR: ADSP-BF533 (Analog Devices)
//*
//*     TOOLKIT:   VDSP (Analog Devices)
//*               
//*     PURPOSE:   Target Dependent Low-Level Stuff
//*               
//*     Version:   3.00-beta
//*
//*     $Revision$
//*     $Date$
//*
//*     Copyright (c) 2003-2006, Harry E. Zhurov
//*
//*     =================================================================
//*     scmRTOS is free software; you can redistribute it and/or
//*     modify it under the terms of the GNU General Public License
//*     as published by the Free Software Foundation; either version 2
//*     of the License, or (at your option) any later version.
//*
//*     This program is distributed in the hope that it will be useful,
//*     but WITHOUT ANY WARRANTY; without even the implied warranty of
//*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//*     GNU General Public License for more details.
//*
//*     You should have received a copy of the GNU General Public License
//*     along with this program; if not, write to the Free Software
//*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//*     MA  02110-1301, USA.
//*     =================================================================
//*
//*     =================================================================
//*     See http://scmrtos.sourceforge.net for documentation, latest
//*     information, license and contact details.
//*     =================================================================
//*
//********************************************************************************

#include "scmRTOS_TARGET_CFG.h"

    .global _OS_Start
    .global _ContextSwitcher_ISR
 
   // .extern _IdleProcStackPointer
   // .extern _IdleProcessExec

    .extern _OS_ContextSwitchHook
    
    .extern ldf_stack_end;
          
    .section program;
    .align 2;

//------------------------------------------------------------------------------
_OS_Start:
    sp   = r0;                              // load highest priority process stack pointer
                                            //
    p0.l = lo(IMASK);                       //
    p0.h = hi(IMASK);                       //
    nop;                                    //
    nop;                                    //
    r1   = [sp++];                          // enable interrupts at CEC level
    [p0] = r1;                              //
                                            //
    p0   = 43*4;                            // emulate 43 pops
    sp   = sp + p0;                         //
                                            //
    rets = [sp++];                          // load process's main function address
    rts;                                    // go to the process's application code

_OS_Start.end:
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
_ContextSwitcher_ISR:

    //--------------------------------------------------------------------------                                        
    //
    //   Save return address
    //
    [--sp] = reti;           
    
    //--------------------------------------------------------------------------                                        
    //
    //   Save context
    //
    [--sp] = rets;           
    [--sp] = astat;
    [--sp] = fp;
    [--sp] = (r7:0,p5:0);
    [--sp] = i0;
    [--sp] = i1;
    [--sp] = i2;
    [--sp] = i3;
    [--sp] = b0;
    [--sp] = b1;
    [--sp] = b2;
    [--sp] = b3;
    [--sp] = l0;
    [--sp] = l1;
    [--sp] = l2;
    [--sp] = l3;
    [--sp] = m0;
    [--sp] = m1;
    [--sp] = m2;
    [--sp] = m3;
    [--sp] = a0.x;
    [--sp] = a0.w;
    [--sp] = a1.x;
    [--sp] = a1.w;
    [--sp] = lc0;
    [--sp] = lc1;
    [--sp] = lt0;
    [--sp] = lt1;
    [--sp] = lb0;
    [--sp] = lb1;

    //--------------------------------------------------------------------------                                        
    //
    //   Switch stack pointers and manage interrupt enable status
    //
    p5.l    = lo(IMASK);                      // save IMASK value
    p5.h    = hi(IMASK);                      // (global interrupts enable state)
    r7      = [p5];                           //
    [--sp]  = r7;                             //
    r0      = sp;
    
    call    _OS_ContextSwitchHook;                          

    sp      = r0;

    nop; nop; nop; nop;
    r0      = [sp++];                         // load IMASK value 
    [p5]    = r0;                             // (global interrupts enable state)
    
    //--------------------------------------------------------------------------                                        
    //
    //   Restore context
    //
    lb1    = [sp++];                        
    lb0    = [sp++];
    lt1    = [sp++];
    lt0    = [sp++];
    lc1    = [sp++];
    lc0    = [sp++];
    a1.w   = [sp++];
    a1.x   = [sp++];
    a0.w   = [sp++];
    a0.x   = [sp++];
    m3     = [sp++];
    m2     = [sp++];
    m1     = [sp++];
    m0     = [sp++];
    l3     = [sp++];
    l2     = [sp++];
    l1     = [sp++];
    l0     = [sp++];
    b3     = [sp++];
    b2     = [sp++];
    b1     = [sp++];
    b0     = [sp++];
    i3     = [sp++];
    i2     = [sp++];
    i1     = [sp++];
    i0     = [sp++];
   (r7:0,
    p5:0)  = [sp++];
    fp     = [sp++];
    astat  = [sp++];
    rets   = [sp++];

    //--------------------------------------------------------------------------                                        
    //
    //   Restore return address and go to the process's application code
    //
    reti   = [sp++];
    rti;
    
._ContextSwitcher_ISR.end:
//------------------------------------------------------------------------------


